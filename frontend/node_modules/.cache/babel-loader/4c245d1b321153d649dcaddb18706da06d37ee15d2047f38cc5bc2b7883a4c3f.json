{"ast":null,"code":"import _objectSpread from\"D:/My projects/AI DOk/doc/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{create}from'zustand';export const useVoiceStore=create((set,get)=>({// Initial state\nisRecording:false,isProcessing:false,isPlaying:false,messages:[],currentTranscript:'',connectionStatus:'disconnected',currentIntent:undefined,extractedEntities:undefined,suggestions:undefined,urgencyLevel:undefined,error:undefined,// Actions\nsetRecording:isRecording=>set({isRecording}),setProcessing:isProcessing=>set({isProcessing}),setPlaying:isPlaying=>set({isPlaying}),setConnectionStatus:connectionStatus=>set({connectionStatus}),setError:error=>set({error}),addMessage:message=>set(state=>({messages:[...state.messages,_objectSpread(_objectSpread({},message),{},{id:\"msg_\".concat(Date.now(),\"_\").concat(Math.random())})]})),updateLastMessage:updates=>set(state=>{const messages=[...state.messages];if(messages.length>0){messages[messages.length-1]=_objectSpread(_objectSpread({},messages[messages.length-1]),updates);}return{messages};}),setCurrentTranscript:currentTranscript=>set({currentTranscript}),updateCurrentIntent:currentIntent=>set({currentIntent}),updateExtractedEntities:extractedEntities=>set({extractedEntities}),updateSuggestions:suggestions=>set({suggestions}),updateUrgencyLevel:urgencyLevel=>set({urgencyLevel}),clearMessages:()=>set({messages:[],currentTranscript:'',currentIntent:undefined,extractedEntities:undefined,suggestions:undefined}),reset:()=>set({messages:[],currentTranscript:'',currentIntent:undefined,extractedEntities:undefined,suggestions:undefined,urgencyLevel:undefined,error:undefined,isRecording:false,isProcessing:false,isPlaying:false}),processVoiceResponse:response=>{var _response$ai_response;const{addMessage,updateCurrentIntent,updateExtractedEntities,updateSuggestions,updateUrgencyLevel,setError,setProcessing}=get();setProcessing(false);// Handle errors\nif(response.error){setError(response.error);addMessage({type:'assistant',content:\"I'm sorry, there was an error: \".concat(response.error),timestamp:new Date().toISOString()});return;}else{setError(undefined);}// Add user message if transcript exists\nif(response.transcript){addMessage({type:'user',content:response.transcript,timestamp:response.timestamp,isAudio:true});}// Process AI response\nif((_response$ai_response=response.ai_response)!==null&&_response$ai_response!==void 0&&_response$ai_response.text){const aiMessage={type:'assistant',content:response.ai_response.text,timestamp:response.timestamp,isAudio:!!response.audio_response,intent:response.ai_response.intent,entities:response.ai_response.extracted_info};addMessage(aiMessage);// Update global state with extracted information\nif(response.ai_response.intent){updateCurrentIntent(response.ai_response.intent);}if(response.ai_response.extracted_info){updateExtractedEntities(response.ai_response.extracted_info);}}// Play audio if available - backend returns audio in audio_response field\nconst audioData=response.audio_response;if(audioData){try{const audioBlob=new Blob([Uint8Array.from(atob(audioData),c=>c.charCodeAt(0))],{type:'audio/wav'});const audioUrl=URL.createObjectURL(audioBlob);const audio=new Audio(audioUrl);// Add user interaction event listeners for audio playback\nconst playAudio=async()=>{try{const{setPlaying}=get();setPlaying(true);await audio.play();audio.onended=()=>setPlaying(false);}catch(playError){console.error('Audio play failed:',playError);const{setPlaying}=get();setPlaying(false);// If autoplay fails, try with user interaction\ndocument.addEventListener('click',()=>{audio.play().catch(console.error);},{once:true});}};playAudio();}catch(error){console.error('Error playing audio:',error);}}// Handle appointment actions\nif(response.appointment_action){console.log('Appointment action:',response.appointment_action);// This could trigger additional UI updates or notifications\n}}}));","map":{"version":3,"names":["create","useVoiceStore","set","get","isRecording","isProcessing","isPlaying","messages","currentTranscript","connectionStatus","currentIntent","undefined","extractedEntities","suggestions","urgencyLevel","error","setRecording","setProcessing","setPlaying","setConnectionStatus","setError","addMessage","message","state","_objectSpread","id","concat","Date","now","Math","random","updateLastMessage","updates","length","setCurrentTranscript","updateCurrentIntent","updateExtractedEntities","updateSuggestions","updateUrgencyLevel","clearMessages","reset","processVoiceResponse","response","_response$ai_response","type","content","timestamp","toISOString","transcript","isAudio","ai_response","text","aiMessage","audio_response","intent","entities","extracted_info","audioData","audioBlob","Blob","Uint8Array","from","atob","c","charCodeAt","audioUrl","URL","createObjectURL","audio","Audio","playAudio","play","onended","playError","console","document","addEventListener","catch","once","appointment_action","log"],"sources":["D:/My projects/AI DOk/doc/frontend/src/stores/voiceStore.ts"],"sourcesContent":["import { create } from 'zustand';\r\nimport { VoiceState, VoiceMessage, VoiceResponse, ExtractedEntities } from '../types';\r\n\r\ninterface VoiceStore extends VoiceState {\r\n  // Enhanced state\r\n  currentIntent?: string;\r\n  extractedEntities?: ExtractedEntities;\r\n  suggestions?: string[];\r\n  urgencyLevel?: 'low' | 'medium' | 'high' | 'emergency';\r\n  error?: string;\r\n  \r\n  // Actions\r\n  setRecording: (isRecording: boolean) => void;\r\n  setProcessing: (isProcessing: boolean) => void;\r\n  setPlaying: (isPlaying: boolean) => void;\r\n  setConnectionStatus: (status: VoiceState['connectionStatus']) => void;\r\n  setError: (error: string | undefined) => void;\r\n  addMessage: (message: Omit<VoiceMessage, 'id'>) => void;\r\n  updateLastMessage: (updates: Partial<VoiceMessage>) => void;\r\n  setCurrentTranscript: (transcript: string) => void;\r\n  updateCurrentIntent: (intent: string) => void;\r\n  updateExtractedEntities: (entities: ExtractedEntities) => void;\r\n  updateSuggestions: (suggestions: string[]) => void;\r\n  updateUrgencyLevel: (level: 'low' | 'medium' | 'high' | 'emergency') => void;\r\n  clearMessages: () => void;\r\n  reset: () => void;\r\n  processVoiceResponse: (response: VoiceResponse) => void;\r\n}\r\n\r\nexport const useVoiceStore = create<VoiceStore>((set, get) => ({\r\n  // Initial state\r\n  isRecording: false,\r\n  isProcessing: false,\r\n  isPlaying: false,\r\n  messages: [],\r\n  currentTranscript: '',\r\n  connectionStatus: 'disconnected',\r\n  currentIntent: undefined,\r\n  extractedEntities: undefined,\r\n  suggestions: undefined,\r\n  urgencyLevel: undefined,\r\n  error: undefined,\r\n\r\n  // Actions\r\n  setRecording: (isRecording) => set({ isRecording }),\r\n  \r\n  setProcessing: (isProcessing) => set({ isProcessing }),\r\n  \r\n  setPlaying: (isPlaying) => set({ isPlaying }),\r\n  \r\n  setConnectionStatus: (connectionStatus) => set({ connectionStatus }),\r\n  \r\n  setError: (error) => set({ error }),\r\n  \r\n  addMessage: (message) => set((state) => ({\r\n    messages: [\r\n      ...state.messages,\r\n      {\r\n        ...message,\r\n        id: `msg_${Date.now()}_${Math.random()}`,\r\n      }\r\n    ]\r\n  })),\r\n  \r\n  updateLastMessage: (updates) => set((state) => {\r\n    const messages = [...state.messages];\r\n    if (messages.length > 0) {\r\n      messages[messages.length - 1] = {\r\n        ...messages[messages.length - 1],\r\n        ...updates\r\n      };\r\n    }\r\n    return { messages };\r\n  }),\r\n  \r\n  setCurrentTranscript: (currentTranscript) => set({ currentTranscript }),\r\n  \r\n  updateCurrentIntent: (currentIntent) => set({ currentIntent }),\r\n  \r\n  updateExtractedEntities: (extractedEntities) => set({ extractedEntities }),\r\n  \r\n  updateSuggestions: (suggestions) => set({ suggestions }),\r\n  \r\n  updateUrgencyLevel: (urgencyLevel) => set({ urgencyLevel }),\r\n  \r\n  clearMessages: () => set({ \r\n    messages: [], \r\n    currentTranscript: '',\r\n    currentIntent: undefined,\r\n    extractedEntities: undefined,\r\n    suggestions: undefined\r\n  }),\r\n  \r\n  reset: () => set({\r\n    messages: [],\r\n    currentTranscript: '',\r\n    currentIntent: undefined,\r\n    extractedEntities: undefined,\r\n    suggestions: undefined,\r\n    urgencyLevel: undefined,\r\n    error: undefined,\r\n    isRecording: false,\r\n    isProcessing: false,\r\n    isPlaying: false\r\n  }),\r\n  \r\n  processVoiceResponse: (response) => {\r\n    const { \r\n      addMessage,\r\n      updateCurrentIntent,\r\n      updateExtractedEntities,\r\n      updateSuggestions,\r\n      updateUrgencyLevel,\r\n      setError,\r\n      setProcessing\r\n    } = get();\r\n    \r\n    setProcessing(false);\r\n    \r\n    // Handle errors\r\n    if (response.error) {\r\n      setError(response.error);\r\n      addMessage({\r\n        type: 'assistant',\r\n        content: `I'm sorry, there was an error: ${response.error}`,\r\n        timestamp: new Date().toISOString()\r\n      });\r\n      return;\r\n    } else {\r\n      setError(undefined);\r\n    }\r\n    \r\n    // Add user message if transcript exists\r\n    if (response.transcript) {\r\n      addMessage({\r\n        type: 'user',\r\n        content: response.transcript,\r\n        timestamp: response.timestamp,\r\n        isAudio: true\r\n      });\r\n    }\r\n    \r\n    // Process AI response\r\n    if (response.ai_response?.text) {\r\n      const aiMessage: Omit<VoiceMessage, 'id'> = {\r\n        type: 'assistant',\r\n        content: response.ai_response.text,\r\n        timestamp: response.timestamp,\r\n        isAudio: !!response.audio_response,\r\n        intent: response.ai_response.intent,\r\n        entities: response.ai_response.extracted_info\r\n      };\r\n\r\n      addMessage(aiMessage);\r\n      \r\n      // Update global state with extracted information\r\n      if (response.ai_response.intent) {\r\n        updateCurrentIntent(response.ai_response.intent);\r\n      }\r\n      \r\n      if (response.ai_response.extracted_info) {\r\n        updateExtractedEntities(response.ai_response.extracted_info);\r\n      }\r\n    }\r\n    \r\n    // Play audio if available - backend returns audio in audio_response field\r\n    const audioData = response.audio_response;\r\n    if (audioData) {\r\n      try {\r\n        const audioBlob = new Blob([\r\n          Uint8Array.from(atob(audioData), c => c.charCodeAt(0))\r\n        ], { type: 'audio/wav' });\r\n        \r\n        const audioUrl = URL.createObjectURL(audioBlob);\r\n        const audio = new Audio(audioUrl);\r\n        \r\n        // Add user interaction event listeners for audio playback\r\n        const playAudio = async () => {\r\n          try {\r\n            const { setPlaying } = get();\r\n            setPlaying(true);\r\n            await audio.play();\r\n            audio.onended = () => setPlaying(false);\r\n          } catch (playError) {\r\n            console.error('Audio play failed:', playError);\r\n            const { setPlaying } = get();\r\n            setPlaying(false);\r\n            // If autoplay fails, try with user interaction\r\n            document.addEventListener('click', () => {\r\n              audio.play().catch(console.error);\r\n            }, { once: true });\r\n          }\r\n        };\r\n        \r\n        playAudio();\r\n        \r\n      } catch (error) {\r\n        console.error('Error playing audio:', error);\r\n      }\r\n    }\r\n    \r\n    // Handle appointment actions\r\n    if (response.appointment_action) {\r\n      console.log('Appointment action:', response.appointment_action);\r\n      // This could trigger additional UI updates or notifications\r\n    }\r\n  }\r\n}));\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}