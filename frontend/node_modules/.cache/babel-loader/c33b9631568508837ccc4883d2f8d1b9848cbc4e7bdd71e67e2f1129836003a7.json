{"ast":null,"code":"import { create } from 'zustand';\nexport const useVoiceStore = create((set, get) => ({\n  // Initial state\n  isRecording: false,\n  isProcessing: false,\n  isPlaying: false,\n  messages: [],\n  currentTranscript: '',\n  connectionStatus: 'disconnected',\n  // Actions\n  setRecording: isRecording => set({\n    isRecording\n  }),\n  setProcessing: isProcessing => set({\n    isProcessing\n  }),\n  setPlaying: isPlaying => set({\n    isPlaying\n  }),\n  setConnectionStatus: connectionStatus => set({\n    connectionStatus\n  }),\n  addMessage: message => set(state => ({\n    messages: [...state.messages, {\n      ...message,\n      id: `msg_${Date.now()}_${Math.random()}`\n    }]\n  })),\n  updateLastMessage: updates => set(state => {\n    const messages = [...state.messages];\n    if (messages.length > 0) {\n      messages[messages.length - 1] = {\n        ...messages[messages.length - 1],\n        ...updates\n      };\n    }\n    return {\n      messages\n    };\n  }),\n  setCurrentTranscript: currentTranscript => set({\n    currentTranscript\n  }),\n  clearMessages: () => set({\n    messages: [],\n    currentTranscript: ''\n  }),\n  processVoiceResponse: response => {\n    var _response$ai_response;\n    const {\n      addMessage,\n      updateLastMessage\n    } = get();\n\n    // Add user message if transcript exists\n    if (response.transcript) {\n      addMessage({\n        type: 'user',\n        content: response.transcript,\n        timestamp: response.timestamp,\n        isAudio: true\n      });\n    }\n\n    // Add assistant response if AI response exists\n    if ((_response$ai_response = response.ai_response) !== null && _response$ai_response !== void 0 && _response$ai_response.text) {\n      addMessage({\n        type: 'assistant',\n        content: response.ai_response.text,\n        timestamp: response.timestamp,\n        isAudio: !!response.audio_response\n      });\n    }\n\n    // Handle errors\n    if (response.error) {\n      addMessage({\n        type: 'assistant',\n        content: `I'm sorry, there was an error: ${response.error}`,\n        timestamp: response.timestamp\n      });\n    }\n  }\n}));","map":{"version":3,"names":["create","useVoiceStore","set","get","isRecording","isProcessing","isPlaying","messages","currentTranscript","connectionStatus","setRecording","setProcessing","setPlaying","setConnectionStatus","addMessage","message","state","id","Date","now","Math","random","updateLastMessage","updates","length","setCurrentTranscript","clearMessages","processVoiceResponse","response","_response$ai_response","transcript","type","content","timestamp","isAudio","ai_response","text","audio_response","error"],"sources":["D:/My projects/AI DOk/doc/frontend/src/stores/voiceStore.ts"],"sourcesContent":["import { create } from 'zustand';\r\nimport { VoiceState, VoiceMessage, VoiceResponse } from '../types';\r\n\r\ninterface VoiceStore extends VoiceState {\r\n  // Actions\r\n  setRecording: (isRecording: boolean) => void;\r\n  setProcessing: (isProcessing: boolean) => void;\r\n  setPlaying: (isPlaying: boolean) => void;\r\n  setConnectionStatus: (status: VoiceState['connectionStatus']) => void;\r\n  addMessage: (message: Omit<VoiceMessage, 'id'>) => void;\r\n  updateLastMessage: (updates: Partial<VoiceMessage>) => void;\r\n  setCurrentTranscript: (transcript: string) => void;\r\n  clearMessages: () => void;\r\n  processVoiceResponse: (response: VoiceResponse) => void;\r\n}\r\n\r\nexport const useVoiceStore = create<VoiceStore>((set, get) => ({\r\n  // Initial state\r\n  isRecording: false,\r\n  isProcessing: false,\r\n  isPlaying: false,\r\n  messages: [],\r\n  currentTranscript: '',\r\n  connectionStatus: 'disconnected',\r\n\r\n  // Actions\r\n  setRecording: (isRecording) => set({ isRecording }),\r\n  \r\n  setProcessing: (isProcessing) => set({ isProcessing }),\r\n  \r\n  setPlaying: (isPlaying) => set({ isPlaying }),\r\n  \r\n  setConnectionStatus: (connectionStatus) => set({ connectionStatus }),\r\n  \r\n  addMessage: (message) => set((state) => ({\r\n    messages: [\r\n      ...state.messages,\r\n      {\r\n        ...message,\r\n        id: `msg_${Date.now()}_${Math.random()}`,\r\n      }\r\n    ]\r\n  })),\r\n  \r\n  updateLastMessage: (updates) => set((state) => {\r\n    const messages = [...state.messages];\r\n    if (messages.length > 0) {\r\n      messages[messages.length - 1] = {\r\n        ...messages[messages.length - 1],\r\n        ...updates\r\n      };\r\n    }\r\n    return { messages };\r\n  }),\r\n  \r\n  setCurrentTranscript: (currentTranscript) => set({ currentTranscript }),\r\n  \r\n  clearMessages: () => set({ messages: [], currentTranscript: '' }),\r\n  \r\n  processVoiceResponse: (response) => {\r\n    const { addMessage, updateLastMessage } = get();\r\n    \r\n    // Add user message if transcript exists\r\n    if (response.transcript) {\r\n      addMessage({\r\n        type: 'user',\r\n        content: response.transcript,\r\n        timestamp: response.timestamp,\r\n        isAudio: true\r\n      });\r\n    }\r\n    \r\n    // Add assistant response if AI response exists\r\n    if (response.ai_response?.text) {\r\n      addMessage({\r\n        type: 'assistant',\r\n        content: response.ai_response.text,\r\n        timestamp: response.timestamp,\r\n        isAudio: !!response.audio_response\r\n      });\r\n    }\r\n    \r\n    // Handle errors\r\n    if (response.error) {\r\n      addMessage({\r\n        type: 'assistant',\r\n        content: `I'm sorry, there was an error: ${response.error}`,\r\n        timestamp: response.timestamp\r\n      });\r\n    }\r\n  }\r\n})); "],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAgBhC,OAAO,MAAMC,aAAa,GAAGD,MAAM,CAAa,CAACE,GAAG,EAAEC,GAAG,MAAM;EAC7D;EACAC,WAAW,EAAE,KAAK;EAClBC,YAAY,EAAE,KAAK;EACnBC,SAAS,EAAE,KAAK;EAChBC,QAAQ,EAAE,EAAE;EACZC,iBAAiB,EAAE,EAAE;EACrBC,gBAAgB,EAAE,cAAc;EAEhC;EACAC,YAAY,EAAGN,WAAW,IAAKF,GAAG,CAAC;IAAEE;EAAY,CAAC,CAAC;EAEnDO,aAAa,EAAGN,YAAY,IAAKH,GAAG,CAAC;IAAEG;EAAa,CAAC,CAAC;EAEtDO,UAAU,EAAGN,SAAS,IAAKJ,GAAG,CAAC;IAAEI;EAAU,CAAC,CAAC;EAE7CO,mBAAmB,EAAGJ,gBAAgB,IAAKP,GAAG,CAAC;IAAEO;EAAiB,CAAC,CAAC;EAEpEK,UAAU,EAAGC,OAAO,IAAKb,GAAG,CAAEc,KAAK,KAAM;IACvCT,QAAQ,EAAE,CACR,GAAGS,KAAK,CAACT,QAAQ,EACjB;MACE,GAAGQ,OAAO;MACVE,EAAE,EAAE,OAAOC,IAAI,CAACC,GAAG,CAAC,CAAC,IAAIC,IAAI,CAACC,MAAM,CAAC,CAAC;IACxC,CAAC;EAEL,CAAC,CAAC,CAAC;EAEHC,iBAAiB,EAAGC,OAAO,IAAKrB,GAAG,CAAEc,KAAK,IAAK;IAC7C,MAAMT,QAAQ,GAAG,CAAC,GAAGS,KAAK,CAACT,QAAQ,CAAC;IACpC,IAAIA,QAAQ,CAACiB,MAAM,GAAG,CAAC,EAAE;MACvBjB,QAAQ,CAACA,QAAQ,CAACiB,MAAM,GAAG,CAAC,CAAC,GAAG;QAC9B,GAAGjB,QAAQ,CAACA,QAAQ,CAACiB,MAAM,GAAG,CAAC,CAAC;QAChC,GAAGD;MACL,CAAC;IACH;IACA,OAAO;MAAEhB;IAAS,CAAC;EACrB,CAAC,CAAC;EAEFkB,oBAAoB,EAAGjB,iBAAiB,IAAKN,GAAG,CAAC;IAAEM;EAAkB,CAAC,CAAC;EAEvEkB,aAAa,EAAEA,CAAA,KAAMxB,GAAG,CAAC;IAAEK,QAAQ,EAAE,EAAE;IAAEC,iBAAiB,EAAE;EAAG,CAAC,CAAC;EAEjEmB,oBAAoB,EAAGC,QAAQ,IAAK;IAAA,IAAAC,qBAAA;IAClC,MAAM;MAAEf,UAAU;MAAEQ;IAAkB,CAAC,GAAGnB,GAAG,CAAC,CAAC;;IAE/C;IACA,IAAIyB,QAAQ,CAACE,UAAU,EAAE;MACvBhB,UAAU,CAAC;QACTiB,IAAI,EAAE,MAAM;QACZC,OAAO,EAAEJ,QAAQ,CAACE,UAAU;QAC5BG,SAAS,EAAEL,QAAQ,CAACK,SAAS;QAC7BC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;;IAEA;IACA,KAAAL,qBAAA,GAAID,QAAQ,CAACO,WAAW,cAAAN,qBAAA,eAApBA,qBAAA,CAAsBO,IAAI,EAAE;MAC9BtB,UAAU,CAAC;QACTiB,IAAI,EAAE,WAAW;QACjBC,OAAO,EAAEJ,QAAQ,CAACO,WAAW,CAACC,IAAI;QAClCH,SAAS,EAAEL,QAAQ,CAACK,SAAS;QAC7BC,OAAO,EAAE,CAAC,CAACN,QAAQ,CAACS;MACtB,CAAC,CAAC;IACJ;;IAEA;IACA,IAAIT,QAAQ,CAACU,KAAK,EAAE;MAClBxB,UAAU,CAAC;QACTiB,IAAI,EAAE,WAAW;QACjBC,OAAO,EAAE,kCAAkCJ,QAAQ,CAACU,KAAK,EAAE;QAC3DL,SAAS,EAAEL,QAAQ,CAACK;MACtB,CAAC,CAAC;IACJ;EACF;AACF,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}