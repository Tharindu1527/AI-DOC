{"ast":null,"code":"import { create } from 'zustand';\nexport const useVoiceStore = create((set, get) => ({\n  // Initial state\n  isRecording: false,\n  isProcessing: false,\n  isPlaying: false,\n  messages: [],\n  currentTranscript: '',\n  connectionStatus: 'disconnected',\n  currentIntent: undefined,\n  extractedEntities: undefined,\n  suggestions: undefined,\n  urgencyLevel: undefined,\n  error: undefined,\n  // Actions\n  setRecording: isRecording => set({\n    isRecording\n  }),\n  setProcessing: isProcessing => set({\n    isProcessing\n  }),\n  setPlaying: isPlaying => set({\n    isPlaying\n  }),\n  setConnectionStatus: connectionStatus => set({\n    connectionStatus\n  }),\n  setError: error => set({\n    error\n  }),\n  addMessage: message => set(state => ({\n    messages: [...state.messages, {\n      ...message,\n      id: `msg_${Date.now()}_${Math.random()}`\n    }]\n  })),\n  updateLastMessage: updates => set(state => {\n    const messages = [...state.messages];\n    if (messages.length > 0) {\n      messages[messages.length - 1] = {\n        ...messages[messages.length - 1],\n        ...updates\n      };\n    }\n    return {\n      messages\n    };\n  }),\n  setCurrentTranscript: currentTranscript => set({\n    currentTranscript\n  }),\n  updateCurrentIntent: currentIntent => set({\n    currentIntent\n  }),\n  updateExtractedEntities: extractedEntities => set({\n    extractedEntities\n  }),\n  updateSuggestions: suggestions => set({\n    suggestions\n  }),\n  updateUrgencyLevel: urgencyLevel => set({\n    urgencyLevel\n  }),\n  clearMessages: () => set({\n    messages: [],\n    currentTranscript: '',\n    currentIntent: undefined,\n    extractedEntities: undefined,\n    suggestions: undefined\n  }),\n  reset: () => set({\n    messages: [],\n    currentTranscript: '',\n    currentIntent: undefined,\n    extractedEntities: undefined,\n    suggestions: undefined,\n    urgencyLevel: undefined,\n    error: undefined,\n    isRecording: false,\n    isProcessing: false,\n    isPlaying: false\n  }),\n  processVoiceResponse: response => {\n    var _response$ai_response, _response$data;\n    const {\n      addMessage,\n      updateCurrentIntent,\n      updateExtractedEntities,\n      updateSuggestions,\n      updateUrgencyLevel,\n      setError,\n      setProcessing\n    } = get();\n    setProcessing(false);\n\n    // Handle errors\n    if (response.error) {\n      setError(response.error);\n      addMessage({\n        type: 'assistant',\n        content: `I'm sorry, there was an error: ${response.error}`,\n        timestamp: new Date().toISOString()\n      });\n      return;\n    } else {\n      setError(undefined);\n    }\n\n    // Add user message if transcript exists\n    if (response.transcript) {\n      addMessage({\n        type: 'user',\n        content: response.transcript,\n        timestamp: response.timestamp,\n        isAudio: true\n      });\n    }\n\n    // Process AI response\n    if ((_response$ai_response = response.ai_response) !== null && _response$ai_response !== void 0 && _response$ai_response.text) {\n      const aiMessage = {\n        type: 'assistant',\n        content: response.ai_response.text,\n        timestamp: response.timestamp,\n        isAudio: !!response.audio_response,\n        intent: response.ai_response.intent,\n        entities: response.ai_response.extracted_info\n      };\n      addMessage(aiMessage);\n\n      // Update global state with extracted information\n      if (response.ai_response.intent) {\n        updateCurrentIntent(response.ai_response.intent);\n      }\n      if (response.ai_response.extracted_info) {\n        updateExtractedEntities(response.ai_response.extracted_info);\n      }\n    }\n\n    // Play audio if available - backend returns audio in data.audio field\n    const audioData = (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.audio;\n    if (audioData) {\n      try {\n        const audioBlob = new Blob([Uint8Array.from(atob(audioData), c => c.charCodeAt(0))], {\n          type: 'audio/wav'\n        });\n        const audioUrl = URL.createObjectURL(audioBlob);\n        const audio = new Audio(audioUrl);\n\n        // Add user interaction event listeners for audio playback\n        const playAudio = async () => {\n          try {\n            const {\n              setPlaying\n            } = get();\n            setPlaying(true);\n            await audio.play();\n            audio.onended = () => setPlaying(false);\n          } catch (playError) {\n            console.error('Audio play failed:', playError);\n            const {\n              setPlaying\n            } = get();\n            setPlaying(false);\n            // If autoplay fails, try with user interaction\n            document.addEventListener('click', () => {\n              audio.play().catch(console.error);\n            }, {\n              once: true\n            });\n          }\n        };\n        playAudio();\n      } catch (error) {\n        console.error('Error playing audio:', error);\n      }\n    }\n\n    // Handle appointment actions\n    if (response.appointment_action) {\n      console.log('Appointment action:', response.appointment_action);\n      // This could trigger additional UI updates or notifications\n    }\n  }\n}));","map":{"version":3,"names":["create","useVoiceStore","set","get","isRecording","isProcessing","isPlaying","messages","currentTranscript","connectionStatus","currentIntent","undefined","extractedEntities","suggestions","urgencyLevel","error","setRecording","setProcessing","setPlaying","setConnectionStatus","setError","addMessage","message","state","id","Date","now","Math","random","updateLastMessage","updates","length","setCurrentTranscript","updateCurrentIntent","updateExtractedEntities","updateSuggestions","updateUrgencyLevel","clearMessages","reset","processVoiceResponse","response","_response$ai_response","_response$data","type","content","timestamp","toISOString","transcript","isAudio","ai_response","text","aiMessage","audio_response","intent","entities","extracted_info","audioData","data","audio","audioBlob","Blob","Uint8Array","from","atob","c","charCodeAt","audioUrl","URL","createObjectURL","Audio","playAudio","play","onended","playError","console","document","addEventListener","catch","once","appointment_action","log"],"sources":["D:/My projects/AI DOk/doc/frontend/src/stores/voiceStore.ts"],"sourcesContent":["import { create } from 'zustand';\r\nimport { VoiceState, VoiceMessage, VoiceResponse, ExtractedEntities } from '../types';\r\n\r\ninterface VoiceStore extends VoiceState {\r\n  // Enhanced state\r\n  currentIntent?: string;\r\n  extractedEntities?: ExtractedEntities;\r\n  suggestions?: string[];\r\n  urgencyLevel?: 'low' | 'medium' | 'high' | 'emergency';\r\n  error?: string;\r\n  \r\n  // Actions\r\n  setRecording: (isRecording: boolean) => void;\r\n  setProcessing: (isProcessing: boolean) => void;\r\n  setPlaying: (isPlaying: boolean) => void;\r\n  setConnectionStatus: (status: VoiceState['connectionStatus']) => void;\r\n  setError: (error: string | undefined) => void;\r\n  addMessage: (message: Omit<VoiceMessage, 'id'>) => void;\r\n  updateLastMessage: (updates: Partial<VoiceMessage>) => void;\r\n  setCurrentTranscript: (transcript: string) => void;\r\n  updateCurrentIntent: (intent: string) => void;\r\n  updateExtractedEntities: (entities: ExtractedEntities) => void;\r\n  updateSuggestions: (suggestions: string[]) => void;\r\n  updateUrgencyLevel: (level: 'low' | 'medium' | 'high' | 'emergency') => void;\r\n  clearMessages: () => void;\r\n  reset: () => void;\r\n  processVoiceResponse: (response: VoiceResponse) => void;\r\n}\r\n\r\nexport const useVoiceStore = create<VoiceStore>((set, get) => ({\r\n  // Initial state\r\n  isRecording: false,\r\n  isProcessing: false,\r\n  isPlaying: false,\r\n  messages: [],\r\n  currentTranscript: '',\r\n  connectionStatus: 'disconnected',\r\n  currentIntent: undefined,\r\n  extractedEntities: undefined,\r\n  suggestions: undefined,\r\n  urgencyLevel: undefined,\r\n  error: undefined,\r\n\r\n  // Actions\r\n  setRecording: (isRecording) => set({ isRecording }),\r\n  \r\n  setProcessing: (isProcessing) => set({ isProcessing }),\r\n  \r\n  setPlaying: (isPlaying) => set({ isPlaying }),\r\n  \r\n  setConnectionStatus: (connectionStatus) => set({ connectionStatus }),\r\n  \r\n  setError: (error) => set({ error }),\r\n  \r\n  addMessage: (message) => set((state) => ({\r\n    messages: [\r\n      ...state.messages,\r\n      {\r\n        ...message,\r\n        id: `msg_${Date.now()}_${Math.random()}`,\r\n      }\r\n    ]\r\n  })),\r\n  \r\n  updateLastMessage: (updates) => set((state) => {\r\n    const messages = [...state.messages];\r\n    if (messages.length > 0) {\r\n      messages[messages.length - 1] = {\r\n        ...messages[messages.length - 1],\r\n        ...updates\r\n      };\r\n    }\r\n    return { messages };\r\n  }),\r\n  \r\n  setCurrentTranscript: (currentTranscript) => set({ currentTranscript }),\r\n  \r\n  updateCurrentIntent: (currentIntent) => set({ currentIntent }),\r\n  \r\n  updateExtractedEntities: (extractedEntities) => set({ extractedEntities }),\r\n  \r\n  updateSuggestions: (suggestions) => set({ suggestions }),\r\n  \r\n  updateUrgencyLevel: (urgencyLevel) => set({ urgencyLevel }),\r\n  \r\n  clearMessages: () => set({ \r\n    messages: [], \r\n    currentTranscript: '',\r\n    currentIntent: undefined,\r\n    extractedEntities: undefined,\r\n    suggestions: undefined\r\n  }),\r\n  \r\n  reset: () => set({\r\n    messages: [],\r\n    currentTranscript: '',\r\n    currentIntent: undefined,\r\n    extractedEntities: undefined,\r\n    suggestions: undefined,\r\n    urgencyLevel: undefined,\r\n    error: undefined,\r\n    isRecording: false,\r\n    isProcessing: false,\r\n    isPlaying: false\r\n  }),\r\n  \r\n  processVoiceResponse: (response) => {\r\n    const { \r\n      addMessage,\r\n      updateCurrentIntent,\r\n      updateExtractedEntities,\r\n      updateSuggestions,\r\n      updateUrgencyLevel,\r\n      setError,\r\n      setProcessing\r\n    } = get();\r\n    \r\n    setProcessing(false);\r\n    \r\n    // Handle errors\r\n    if (response.error) {\r\n      setError(response.error);\r\n      addMessage({\r\n        type: 'assistant',\r\n        content: `I'm sorry, there was an error: ${response.error}`,\r\n        timestamp: new Date().toISOString()\r\n      });\r\n      return;\r\n    } else {\r\n      setError(undefined);\r\n    }\r\n    \r\n    // Add user message if transcript exists\r\n    if (response.transcript) {\r\n      addMessage({\r\n        type: 'user',\r\n        content: response.transcript,\r\n        timestamp: response.timestamp,\r\n        isAudio: true\r\n      });\r\n    }\r\n    \r\n    // Process AI response\r\n    if (response.ai_response?.text) {\r\n      const aiMessage: Omit<VoiceMessage, 'id'> = {\r\n        type: 'assistant',\r\n        content: response.ai_response.text,\r\n        timestamp: response.timestamp,\r\n        isAudio: !!response.audio_response,\r\n        intent: response.ai_response.intent,\r\n        entities: response.ai_response.extracted_info\r\n      };\r\n\r\n      addMessage(aiMessage);\r\n      \r\n      // Update global state with extracted information\r\n      if (response.ai_response.intent) {\r\n        updateCurrentIntent(response.ai_response.intent);\r\n      }\r\n      \r\n      if (response.ai_response.extracted_info) {\r\n        updateExtractedEntities(response.ai_response.extracted_info);\r\n      }\r\n    }\r\n    \r\n    // Play audio if available - backend returns audio in data.audio field\r\n    const audioData = response.data?.audio;\r\n    if (audioData) {\r\n      try {\r\n        const audioBlob = new Blob([\r\n          Uint8Array.from(atob(audioData), c => c.charCodeAt(0))\r\n        ], { type: 'audio/wav' });\r\n        \r\n        const audioUrl = URL.createObjectURL(audioBlob);\r\n        const audio = new Audio(audioUrl);\r\n        \r\n        // Add user interaction event listeners for audio playback\r\n        const playAudio = async () => {\r\n          try {\r\n            const { setPlaying } = get();\r\n            setPlaying(true);\r\n            await audio.play();\r\n            audio.onended = () => setPlaying(false);\r\n          } catch (playError) {\r\n            console.error('Audio play failed:', playError);\r\n            const { setPlaying } = get();\r\n            setPlaying(false);\r\n            // If autoplay fails, try with user interaction\r\n            document.addEventListener('click', () => {\r\n              audio.play().catch(console.error);\r\n            }, { once: true });\r\n          }\r\n        };\r\n        \r\n        playAudio();\r\n        \r\n      } catch (error) {\r\n        console.error('Error playing audio:', error);\r\n      }\r\n    }\r\n    \r\n    // Handle appointment actions\r\n    if (response.appointment_action) {\r\n      console.log('Appointment action:', response.appointment_action);\r\n      // This could trigger additional UI updates or notifications\r\n    }\r\n  }\r\n}));\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}